from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database import (
    get_all_group_numbers, get_students_by_group, get_achievements_by_student,
    get_pending_achievements, delete_achievement, update_achievement_description,
    update_achievement_files, update_achievement_status
)
from keyboards import (
    admin_main_menu_markup, admin_back_to_main_markup, admin_back_to_groups_view_markup,
    admin_back_to_students_view_markup, admin_achievement_details_markup, admin_back_to_achievement_details_markup,
    admin_approve_achievement_details_markup
)

class AdminState(StatesGroup):
    main_menu = State()
    waiting_for_group_choice = State()
    waiting_for_student_choice = State()
    waiting_for_achievement_choice = State()
    viewing_achievement_details = State()
    edit_waiting_for_description = State()
    edit_waiting_for_files = State()
    approve_waiting_for_number = State()
    approve_waiting_for_approvement_choice = State()

async def admin_view_achievements_menu(callback_query: types.CallbackQuery, state: FSMContext):
    groups = get_all_group_numbers()
    if not groups:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.", reply_markup=admin_main_menu_markup)
        return

    response = "–ì—Ä—É–ø–ø—ã:\n\n"
    for idx, group in enumerate(groups, start=1):
        response += f"{idx}. {group} \n"

    await callback_query.message.answer(response)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:", reply_markup=admin_back_to_main_markup)
    await AdminState.waiting_for_group_choice.set()

async def admin_choose_group(message: types.Message, state: FSMContext):
    groups = get_all_group_numbers()

    try:
        group_idx = int(message.text) - 1
        if group_idx < 0 or group_idx >= len(groups):
            raise ValueError("Invalid index")

        group = groups[group_idx]
        await state.update_data(group=group)
        await AdminState.waiting_for_student_choice.set()

        students = get_students_by_group(group)
        if not students:
            await message.answer("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.", reply_markup=admin_back_to_groups_view_markup)
            return

        response = f"–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {group}:\n\n"
        for idx, student in enumerate(students, start=1):
            response += f"{idx}. {student} ( {len(get_achievements_by_student(student))}üèÖ)\n"

        await message.answer(response)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=admin_back_to_groups_view_markup)

    except (ValueError, IndexError):
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await display_groups_list(message, state)

async def display_groups_list(message: types.Message, state: FSMContext):
    groups = get_all_group_numbers()
    response = "–ì—Ä—É–ø–ø—ã:\n\n"
    for idx, group in enumerate(groups, start=1):
        response += f"{idx}. {group}\n"

    await message.answer(response)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:", reply_markup=admin_back_to_main_markup)
    await AdminState.waiting_for_group_choice.set()

async def admin_choose_student(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    group = user_data.get('group')

    students = get_students_by_group(group)

    try:
        student_idx = int(message.text) - 1
        if student_idx < 0 or student_idx >= len(students):
            raise ValueError("Invalid index")

        student = students[student_idx]
        await state.update_data(student=student)
        await AdminState.waiting_for_achievement_choice.set()

        student_achievements = get_achievements_by_student(student)
        if not student_achievements:
            await message.answer("–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.", reply_markup=admin_back_to_students_view_markup)
            return

        response = f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student}:\n\n"
        for idx, achievement in enumerate(student_achievements, start=1):
            status_emoji = 'üü¢' if achievement.status == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' else 'üü°' if achievement.status == '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' else 'üî¥'
            description = achievement.description.strip().replace('\n', ' ')
            if len(description) > 27:
                description = description[:27] + '...'
            response += f"{idx}. {status_emoji} {description}\n"

        await message.answer(response)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", reply_markup=admin_back_to_students_view_markup)

    except (ValueError, IndexError):
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        students = get_students_by_group(group)
        response = f"–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {group}:\n\n"
        for idx, student in enumerate(students, start=1):
            response += f"{idx}. {student} ( {len(get_achievements_by_student(student))}üèÖ)\n"
        await message.answer(response)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=admin_back_to_groups_view_markup)
        await AdminState.waiting_for_student_choice.set()

async def display_achievements_list(message: types.Message, state: FSMContext, achievements):
    response = f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student}:\n\n"
    for idx, achievement in enumerate(student_achievements, start=1):
        status_emoji = 'üü¢' if achievement.status == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' else 'üü°' if achievement.status == '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' else 'üî¥'
        description = achievement.description.strip().replace('\n', ' ')
        if len(description) > 27:
            description = description[:27] + '...'
        response += f"{idx}. {status_emoji} {description}\n"

    await message.answer(response)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=admin_back_to_students_view_markup)

async def admin_choose_achievement(message_or_callback: types.Message or types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    student = user_data.get('student')
    achievements = get_achievements_by_student(student)

    if isinstance(message_or_callback, types.Message):
        message = message_or_callback

        try:
            achievement_idx = int(message.text) - 1
            if achievement_idx < 0 or achievement_idx >= len(achievements):
                raise ValueError("Invalid index")

            achievement = achievements[achievement_idx]
            await state.update_data(current_achievement=achievement.to_dict())
            await AdminState.viewing_achievement_details.set()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
            for file_type, file_id in achievement.files:
                if file_type == 'photo':
                    await message.answer_photo(file_id)
                elif file_type == 'document':
                    await message.answer_document(file_id)

            status_emoji = 'üü¢' if achievement.status == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' else 'üü°' if achievement.status == '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' else 'üî¥'
            response = f"{achievement.description}\n\n{achievement.status} {status_emoji}\n"
            await message.answer(response, reply_markup=admin_achievement_details_markup)

        except (ValueError, IndexError):
            await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await display_achievements_list(message, state, achievements)

    elif isinstance(message_or_callback, types.CallbackQuery):
        callback_query = message_or_callback

        if not achievements:
            await callback_query.message.answer("–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.", reply_markup=admin_back_to_students_view_markup)
            return

        await display_achievements_list(callback_query.message, state, achievements)
        await AdminState.waiting_for_achievement_choice.set()

async def admin_back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    await AdminState.main_menu.set()
    await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_menu_markup)

async def admin_back_to_groups_view(callback_query: types.CallbackQuery, state: FSMContext):
    await display_groups_list(callback_query.message, state)

async def admin_back_to_students_view(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    group = user_data.get('group')
    students = get_students_by_group(group)

    response = f"–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {group}:\n\n"
    for idx, student in enumerate(students, start=1):
        response += f"{idx}. {student} ( {len(get_achievements_by_student(student))}üèÖ)\n"

    await callback_query.message.answer(response)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=admin_back_to_groups_view_markup)
    await AdminState.waiting_for_student_choice.set()

async def admin_back_to_achievements_view(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    student = user_data.get('student')
    student_achievements = get_achievements_by_student(student)

    response = f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student}:\n\n"
    for idx, achievement in enumerate(student_achievements, start=1):
        status_emoji = 'üü¢' if achievement.status == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' else 'üü°' if achievement.status == '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' else 'üî¥'
        description = achievement.description.strip().replace('\n', ' ')
        if len(description) > 27:
            description = description[:27] + '...'
        response += f"{idx}. {status_emoji} {description}\n"

    await callback_query.message.answer(response)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", reply_markup=admin_back_to_students_view_markup)
    await AdminState.waiting_for_achievement_choice.set()

async def admin_back_to_approve_achievements_view(callback_query: types.CallbackQuery, state: FSMContext):
    pending_achievements = get_pending_achievements()
    if not pending_achievements:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", reply_markup=admin_main_menu_markup)
        return

    response = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n\n"
    for idx, ach in enumerate(pending_achievements, start=1):
        description = ach.description.strip().replace('\n', ' ')
        if len(description) > 27:
            description = description[:27] + '...'
        response += f"{idx}. {description}\n"

    await callback_query.message.answer(response)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=admin_back_to_main_markup)
    await AdminState.approve_waiting_for_number.set()

async def admin_edit_description(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", reply_markup=admin_back_to_achievement_details_markup)
    await AdminState.edit_waiting_for_description.set()

async def admin_save_edited_description(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    achievement_id = user_data.get('current_achievement')['id']
    new_description = message.text

    update_achievement_description(achievement_id, new_description)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    await admin_choose_achievement(message, state)

async def admin_edit_files(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(files=[])  # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=admin_back_to_achievement_details_markup)
    await AdminState.edit_waiting_for_files.set()

async def admin_upload_files(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    files = user_data.get('files', [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    if len(files) >= 10:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ 10 —Ñ–∞–π–ª–æ–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if not message.photo and not message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    if message.photo:
        file_id = message.photo[-1].file_id
        files.append(('photo', file_id))
    elif message.document:
        file_id = message.document.file_id
        files.append(('document', file_id))

    await state.update_data(files=files)

async def admin_save_edited_files(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    achievement_id = user_data.get('current_achievement')['id']
    files = user_data.get('files', [])

    update_achievement_files(achievement_id, files)
    await callback_query.message.answer("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await admin_choose_achievement(callback_query.message, state)


async def admin_delete_achievement(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    achievement_id = user_data.get('current_achievement')['id']

    # –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    delete_achievement(achievement_id)
    await callback_query.message.answer("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

    # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = user_data.get('student')
    student_achievements = get_achievements_by_student(student)

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å–ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if not student_achievements:
        await callback_query.message.answer("–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.",
                                            reply_markup=admin_back_to_students_view_markup)
        await AdminState.waiting_for_achievement_choice.set()
        return

    # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    response = f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student}:\n\n"
    for idx, achievement in enumerate(student_achievements, start=1):
        status_emoji = 'üü¢' if achievement.status == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' else 'üü°' if achievement.status == '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' else 'üî¥'
        description = achievement.description.strip().replace('\n', ' ')
        if len(description) > 27:
            description = description[:27] + '...'
        response += f"{idx}. {status_emoji} {description}\n"

    await callback_query.message.answer(response)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                                        reply_markup=admin_back_to_students_view_markup)
    await AdminState.waiting_for_achievement_choice.set()


async def admin_approve_achievements_menu(callback_query: types.CallbackQuery, state: FSMContext):
    pending_achievements = get_pending_achievements()
    if not pending_achievements:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", reply_markup=admin_main_menu_markup)
        return

    response = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n\n"
    for idx, ach in enumerate(pending_achievements, start=1):
        description = ach.description.strip().replace('\n', ' ')
        if len(description) > 27:
            description = description[:27] + '...'
        response += f"{idx}. {description}\n"

    await callback_query.message.answer(response)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=admin_back_to_main_markup)
    await AdminState.approve_waiting_for_number.set()

async def admin_choose_pending_achievement(message: types.Message, state: FSMContext):
    pending_achievements = get_pending_achievements()

    try:
        achievement_idx = int(message.text) - 1
        if achievement_idx >= len(pending_achievements):
            raise ValueError("Invalid index")

        achievement = pending_achievements[achievement_idx]
        await state.update_data(current_achievement=achievement.to_dict())
        await AdminState.approve_waiting_for_approvement_choice.set()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
        for file_type, file_id in achievement.files:
            if file_type == 'photo':
                await message.answer_photo(file_id)
            elif file_type == 'document':
                await message.answer_document(file_id)

        response = f"–ì—Ä—É–ø–ø–∞: {achievement.student_group}\n\n{achievement.student_name}\n\n{achievement.description}\n"
        await message.answer(response, reply_markup=admin_approve_achievement_details_markup)

    except (ValueError, IndexError):
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await display_pending_achievements_list(message)


async def display_pending_achievements_list(message: types.Message):
    pending_achievements = get_pending_achievements()
    response = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n\n"
    for idx, ach in enumerate(pending_achievements, start=1):
        description = ach.description.strip().replace('\n', ' ')
        if len(description) > 27:
            description = description[:27] + '...'
        response += f"{idx}. {description}\n"

    await message.answer(response)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=admin_back_to_main_markup)
    await AdminState.approve_waiting_for_number.set()


async def admin_approve_achievement(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    achievement_id = user_data.get('current_achievement')['id']

    update_achievement_status(achievement_id, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
    await callback_query.message.answer("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    await display_pending_achievements_list(callback_query.message)

async def admin_reject_achievement(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    achievement_id = user_data.get('current_achievement')['id']

    update_achievement_status(achievement_id, '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
    await callback_query.message.answer("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await display_pending_achievements_list(callback_query.message)


def register_admin_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(admin_view_achievements_menu, text='admin_view_achievements_menu', state=AdminState.main_menu)
    dp.register_callback_query_handler(admin_approve_achievements_menu, text='admin_approve_achievements_menu', state=AdminState.main_menu)

    dp.register_message_handler(admin_choose_group, state=AdminState.waiting_for_group_choice)
    dp.register_message_handler(admin_choose_student, state=AdminState.waiting_for_student_choice)
    dp.register_message_handler(admin_choose_achievement, state=AdminState.waiting_for_achievement_choice)
    dp.register_message_handler(admin_choose_pending_achievement, state=AdminState.approve_waiting_for_number)

    dp.register_callback_query_handler(admin_edit_description, text='admin_edit_description_achievement', state=AdminState.viewing_achievement_details)
    dp.register_message_handler(admin_save_edited_description, state=AdminState.edit_waiting_for_description)

    dp.register_callback_query_handler(admin_edit_files, text='admin_edit_files_achievement', state=AdminState.viewing_achievement_details)
    dp.register_message_handler(admin_upload_files, content_types=['photo', 'document'], state=AdminState.edit_waiting_for_files)
    dp.register_callback_query_handler(admin_save_edited_files, text='admin_save_edited_files', state=AdminState.edit_waiting_for_files)

    dp.register_callback_query_handler(admin_delete_achievement, text='admin_delete_achievement', state=AdminState.viewing_achievement_details)

    dp.register_callback_query_handler(admin_approve_achievement, text='admin_approve_achievement', state=AdminState.approve_waiting_for_approvement_choice)
    dp.register_callback_query_handler(admin_reject_achievement, text='admin_reject_achievement', state=AdminState.approve_waiting_for_approvement_choice)
    dp.register_callback_query_handler(admin_back_to_main, text='admin_back_to_main', state='*')
    dp.register_callback_query_handler(display_groups_list, text='admin_back_to_main', state=AdminState.waiting_for_group_choice)
    dp.register_callback_query_handler(admin_back_to_groups_view, text='admin_back_to_groups_view',
                                       state=AdminState.waiting_for_student_choice)
    dp.register_callback_query_handler(admin_back_to_students_view, text='admin_back_to_students_view',
                                       state=AdminState.waiting_for_achievement_choice)
    dp.register_callback_query_handler(admin_back_to_achievements_view, text='admin_back_to_achievements_view',
                                       state=AdminState.viewing_achievement_details)
    dp.register_callback_query_handler(admin_back_to_students_view, text='admin_back_to_students_view',
                                       state=AdminState.waiting_for_achievement_choice)
    dp.register_callback_query_handler(admin_back_to_approve_achievements_view,
                                       text='admin_back_to_approve_achievements_view',
                                       state=AdminState.approve_waiting_for_approvement_choice)